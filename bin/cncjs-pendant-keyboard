#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
var convert = require("convert-units");
var keys = require("../keys");
var extraKeys = require("../extraKeys");
const mustache = require("mustache");
const { command } = require("commander");
var options = {};
var gcodeFolder = path.join(__dirname, "../gcode");

const PLATE_THICKNESS = 5;

program
  .version(pkg.version)
  .usage("-s <secret> -p <port> [options]")
  .option("-l, --list", "list available ports then exit")
  .option("-s, --secret", "the secret key stored in the ~/.cncrc file")
  .option("-p, --port <port>", "path or name of serial port")
  .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
  .option(
    "--socket-address <address>",
    "socket address or hostname (default: localhost)",
    "localhost"
  )
  .option("--socket-port <port>", "socket port (default: 8000)", 8000)
  .option(
    "--controller-type <type>",
    "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
    "Grbl"
  )
  .option(
    "--access-token-lifetime <lifetime>",
    "access token lifetime in seconds or a time span string (default: 30d)",
    "30d"
  );

program.parse(process.argv);

var options = {
  secret: program.secret,
  port: program.port,
  baudrate: program.baudrate,
  socketAddress: program.socketAddress,
  socketPort: program.socketPort,
  controllerType: program.controllerType,
  accessTokenLifetime: program.accessTokenLifetime,
};

if (options.list) {
  serialport.list(function (err, ports) {
    if (err) {
      console.error(err);
      process.exit(1);
    }
    ports.forEach(function (port) {
      console.log(port.comName);
    });
  });
  return;
}

var store = {
  controller: {
    state: {},
    settings: {},
  },
  sender: {
    status: {},
  },
};

var kbdevent = {
  l_control: 0,
  l_shift: 0,
  l_alt: 0,
  l_meta: 0,
  r_control: 0,
  r_shift: 0,
  r_alt: 0,
  r_meta: 0,
  key: 0, // Normal keys
  extra: 0, // Advanced Keys or Special Keys
  repeating: 0, // If it is repating a movement
  can_repeat: 1, // If can repeat
  move: 1, // Actually move size
  default_move: 1, // Alter by F1, F2, F3
};

var createServer = function (options) {
  serverMain(options, function (err, socket) {
    // Grbl
    socket.on("Grbl:state", function (state) {
      store.controller.state = state;
    });
    socket.on("Grbl:settings", function (settings) {
      store.controller.settings = settings;
    });

    // Smoothie
    socket.on("Smoothie:state", function (state) {
      store.controller.state = state;
    });
    socket.on("Smoothie:settings", function (settings) {
      store.controller.settings = settings;
    });

    // TinyG
    socket.on("TinyG:state", function (state) {
      store.controller.state = state;
    });
    socket.on("TinyG:settings", function (settings) {
      store.controller.settings = settings;
    });

    // Marlin
    socket.on("Marlin:state", function (state) {
      store.controller.state = state;
    });
    socket.on("Marlin:settings", function (settings) {
      store.controller.settings = settings;
    });

    // Sender
    socket.on("sender:status", function (data) {
      store.sender.status = data;
    });

    const findPath = (interface) =>
      hid
        .devices()
        .find(
          (item) =>
            item.vendorId === 6551 &&
            item.productId === 9267 &&
            item.interface === interface
        ).path;

    console.log("Keyboard HID Address:", findPath(0), " & ", findPath(1));
    var keyboard_main = new hid.HID(findPath(0));
    var keyboard_extra = new hid.HID(findPath(1));

    var tool_diameter = 6;
    var homing_unit = "mm";
    var feed_percentage = 100;
    var feed_percentage_increment = 10;
    var min_feed = 50;
    var max_feed = 300;
    var probe_size = 5;

    keyboard_main.on("data", function (data) {
      var recv = data.toJSON().data;
      var bits = recv.shift();
      kbdevent.l_control = (bits & 1) !== 0;
      kbdevent.l_shift = (bits & 2) !== 0;
      kbdevent.l_alt = (bits & 4) !== 0;
      kbdevent.l_meta = (bits & 8) !== 0;
      kbdevent.r_control = (bits & 16) !== 0;
      kbdevent.r_shift = (bits & 32) !== 0;
      kbdevent.r_alt = (bits & 64) !== 0;
      kbdevent.r_meta = (bits & 128) !== 0;
      recv.shift();
      kbdevent.key = recv.shift();
      kbdevent.repeating = 0;
      sendToController();
    });

    keyboard_extra.on("data", function (data) {
      var recv = data.toJSON().data;
      recv.shift();
      kbdevent.extra = recv.shift();
      kbdevent.repeating = 0;
      sendToController();
    });

    function sendToController() {
      // Calculate move size modifiers
      kbdevent.move = kbdevent.default_move;
      if (kbdevent.l_alt || kbdevent.r_alt) {
        kbdevent.move = 0.1;
      } else if (kbdevent.l_shift || kbdevent.r_shift || kbdevent.r_meta) {
        kbdevent.move = 10;
      }

      // Process pressed key
      switch (kbdevent.extra) {
        case extraKeys.VOLUME_DOWN:
          relativeMovement("Z", "down", kbdevent.move);
          break;
        case extraKeys.VOLUME_UP:
          relativeMovement("Z", "up", kbdevent.move);
          break;
        case extraKeys.MEDIA_PLAY:
          socket.emit("write", options.port, "M106 P0\n");
          break;
        case extraKeys.MUTE:
          socket.emit("write", options.port, "M107\n");
          break;
        case extraKeys.HOME:
          // Key: Home (Casa) -> Goto Zero-working position
          socket.emit("write", options.port, "G90\n");
          socket.emit("write", options.port, "G00 X0 Y0 Z0\n");
          break;
        case extraKeys.PLAY_PAUSE: // Key: Play/Pause
          socket.emit(
            "write",
            options.port,
            kbdevent.l_meta ? "M108\n" : "M0\n"
          );
          break;
        case extraKeys.PREVIOUS: // Key: PREVIOUS_SONG
          if (feed_percentage >= min_feed + feed_percentage_increment) {
            feed_percentage -= feed_percentage_increment;
            socket.emit(
              "write",
              options.port,
              "M220 S" + feed_percentage + "\n"
            );
          }
          break;
        case extraKeys.NEXT: // Key: NEXT_SONG
          if (feed_percentage <= max_feed - feed_percentage_increment) {
            feed_percentage += feed_percentage_increment;
            socket.emit(
              "write",
              options.port,
              "M220 S" + feed_percentage + "\n"
            );
          }
          break;
        case extraKeys.SEARCH: // FIND EDGE
          var view = {
            margin: 20,
            plateThickness: PLATE_THICKNESS,
            offset: function () {
              return (
                -(convert(tool_diameter).from(homing_unit).to("mm") / 2) -
                PLATE_THICKNESS
              );
            },
          };
          executeGCode(path.join(gcodeFolder, "findedge.gcode"), view);
        default:
          break;
      }

      switch (kbdevent.key) {
        case keys.LEFT: // arrow: left
          relativeMovement("X", "left", kbdevent.move);
          break;
        case keys.RIGHT: // arrow: right
          relativeMovement("X", "right", kbdevent.move);
          break;
        case keys.UP: // arrow: up
          relativeMovement("Y", "up", kbdevent.move);
          break;
        case keys.DOWN: // arrow: down
          relativeMovement("Y", "down", kbdevent.move);
          break;
        case keys.F1: // key: F1
          kbdevent.default_move = 0.1;
          break;
        case keys.F2: // key: F2
          kbdevent.default_move = 1;
          break;
        case keys.F3: // key: F3
          kbdevent.default_move = 10;
          break;
        case keys.F4: // key: F4
          kbdevent.default_move = 100;
          break;
        case keys.OK: // Key: OK or Enter
          kbdevent.can_repeat = kbdevent.can_repeat ? 0 : 1;
          break;
        case keys.PAGE_DOWN: // Key: Page down
          socket.emit("write", options.port, "G28 Z\n");
          socket.emit("write", options.port, "G92 Z5\n");
          socket.emit("write", options.port, "G00 Z10\n");
          break;
        case keys.X: // Key: X
          var offset = -(
            convert(tool_diameter).from(homing_unit).to("mm") / 2 +
            probe_size
          );
          socket.emit("write", options.port, "G38.2 F150 X700\n");
          socket.emit("write", options.port, "G92 X" + offset + "\n");
          socket.emit("write", options.port, "F3000\n");
          break;
        case keys.Y: // Key: Y
          var offset = -(
            convert(tool_diameter).from(homing_unit).to("mm") / 2 +
            probe_size
          );
          socket.emit("write", options.port, "G38.2 F150 Y700\n");
          socket.emit("write", options.port, "G92 Y" + offset + "\n");
          socket.emit("write", options.port, "F3000\n");
          break;
        case keys.ZERO: // Key: Home
          socket.emit("write", options.port, "G92 X0 Y0\n");
          break;
        case keys.HOME:
          socket.emit("write", options.port, "G28 Y X\n");
        default:
          break;
      }

      if (kbdevent.key >= keys.ONE && kbdevent.key <= keys.NINE) {
        var new_diameter = kbdevent.key - keys.ONE + 1;
        var tool_diameter_display;
        if (new_diameter == tool_diameter) {
          homing_unit = "in";
          tool_diameter = 1 / new_diameter;
          tool_diameter_display = decimalToFraction(tool_diameter).display;
        } else {
          homing_unit = "mm";
          tool_diameter = new_diameter;
          tool_diameter_display = tool_diameter;
        }
        socket.emit(
          "write",
          options.port,
          `M117 Tool d1: ${tool_diameter_display} ${homing_unit}\n`
        );
      }

      if (
        (kbdevent.extra || kbdevent.key) &&
        kbdevent.can_repeat &&
        kbdevent.key != 40 && // Key: Enter / OK -- change repeat function
        kbdevent.extra != 148 // Special Key: Home -- goto Zero-working position
      ) {
        if (!kbdevent.repeating) {
          kbdevent.repeating = 1;
          setTimeout(sendToController, 1000);
        } else {
          setTimeout(sendToController, 100);
        }
      } else {
        kbdevent.repeating = 0;
      }
    }

    function relativeMovement(axis, direction, move) {
      socket.emit("write", options.port, "G91\n");
      socket.emit(
        "write",
        options.port,
        "G00 " +
          axis +
          (direction == "left" || direction == "down" ? "-" : "") +
          move +
          "\n"
      );
      socket.emit("write", options.port, "G90\n");
    }

    function gcd(a, b) {
      return b ? gcd(b, a % b) : a;
    }

    var decimalToFraction = function (_decimal) {
      var top = _decimal.toString().replace(/\d+[.]/, "");
      var bottom = Math.pow(10, top.length);
      if (_decimal > 1) {
        top = +top + Math.floor(_decimal) * bottom;
      }
      var x = gcd(top, bottom);
      return {
        top: top / x,
        bottom: bottom / x,
        display: top / x + "/" + bottom / x,
      };
    };

    function executeGCode(file, view) {
      var template = fs.readFileSync(file, "utf8");

      var rendered = mustache.render(template, view);
      var commands = rendered.split("\n");
      commands.forEach((cmd) => {
        socket.emit("write", options.port, cmd + "\n", (data) => {
          console.log(data); // data will be 'woot'
        });
       
      });
    }
  });
};

if (options.port) {
  createServer(options);
  return;
}

serialport.list(function (err, ports) {
  if (err) {
    console.error(err);
    process.exit(1);
  }
  const choices = ports.map(function (port) {
    return port.comName;
  });

  inquirer
    .prompt([
      {
        type: "list",
        name: "port",
        message: "Specify which port you want to use?",
        choices: choices,
      },
    ])
    .then(function (answers) {
      options.port = answers.port;

      createServer(options);
    });
});
